# Grey Matter Fabric Chart Overrides

global:
  # Used as imagePullSecrets value for each subchart
  image_pull_secret: docker.secret
  # Deployment environment, one of "eks", "kuberenetes", or "openshift"
  environment: openshift              
  # Used to configure control and control-api environment variables
  zone: zone-default-zone             
  # Whether to use consul for service discovery
  consul:                             
    enabled: false
    host: ''
    port: 8500
    edge_port: 10808
  # API Key used to configure the gm_jwtsecurity filter. Refactor this to use the jwt-certs secret.
  jwt_api_key: dm9sY2Fuby1lcGlkZW1pYy10d2VsZnRoLXRhbWFsZQ==
  control:
    # Port for Grey Matter Control. Used in sidecar envvars
    port: 50000
    # The label Control uses to find pods to include in the mesh
    cluster_label: greymatter.io/control
    # Comma delimited string of namespaces for control to monitor. Also used by prometheus.    
    additional_namespaces:
  data:
    # whether to install an external data
    external:
      enabled: true
    # whether to install an internal data
    internal:
      enabled: true
  # Whether or not to use spire for cert management and the trust domain
  spire:
    enabled: true
    trust_domain: quickstart.greymatter.io
    path: '/run/spire/socket/agent.sock'
  # Configures the init container used to wait on various deployments to be ready
  waiter:                               
    image: deciphernow/k8s-waiter:latest
    service_account: 
      create: true
      name: waiter-sa
  # Sidecar configuration (Control-api is the only service in this chart with a proxy)
  sidecar:
    # GM Proxy version, used by control-api
    version: 1.4.4
    envvars:
      xds_cluster:
        type: value
        value: 'control-api'
      proxy_dynamic:
        type: 'value'
        value: 'true'
      xds_zone:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      xds_host:
        type: 'value'
        value: 'control.{{ .Release.Namespace }}.svc'
      xds_port:
        type: 'value'
        value: '{{ .Values.global.control.port }}'
      xds_node_id:
        type: 'value'
        value: 'default'
      envoy_admin_log_path:
        type: 'value'
        value: '/dev/stdout'

control:
  control:
    # Name used for the deployment and service resources
    name: 'control'
    # Display name used for NOTES.txt
    display_name: 'Control'
    # Number of replicas for the deployment
    replicas: 1
    # Version of control
    version: 1.4.2
    image: 'docker.greymatter.io/development/gm-control:latest'
    # When to pull images, used in the deployment
    image_pull_policy: IfNotPresent
    # Secret used to talk to control-api
    secret:                      
      enabled: true
      secret_name: control-certs
      mount_point: /service-certs
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
    # The name of the service account with access to pods and endpoints. Can be created if it doesn't exist.
    service_account:
      create: true
      name: control-sa
    envvars:
      gm_control_console_level:
        type: 'value'
        value: 'info'
      gm_control_api_key:
        type: 'value'
        value: 'xxx'
      gm_control_api_zone_name:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      gm_control_api_insecure:
        type: 'value'
        value: "{{ .Values.control.secret.insecure }}"
      gm_control_api_ssl:
        type: 'value'
        value: "{{- if .Values.global.spire.enabled }}false{{- else }}{{ .Values.control.secret.enabled }}{{- end }}"
      gm_control_api_sslcert:
        type: 'value'
        value: "{{ .Values.control.secret.mount_point }}/{{ .Values.control.secret.secret_keys.cert }}"
      gm_control_api_sslkey:
        type: 'value'
        value: "{{ .Values.control.secret.mount_point }}/{{ .Values.control.secret.secret_keys.key }}"
      gm_control_api_host:
        type: 'value'
        value: 'control-api:5555'
      gm_control_cmd:
        type: 'value'
        value: 'kubernetes'
      gm_control_xds_resolve_dns:
        type: 'value'
        value: 'true'
      gm_control_xds_ads_enabled:
        type: 'value'
        value: 'true'
      gm_control_kubernetes_cluster_label:
        type: 'value'
        value: "{{ .Values.global.control.cluster_label }}"
      gm_control_kubernetes_port_name:
        type: 'value'
        value: 'proxy'
      gm_control_kubernetes_namespaces:
        type: 'value'
        value: '{{ include "control.namespaces" . }}'
      # The following values are not applied. Change the type to 'value' to use these variables.
      gm_control_diff_dry_run:
        type: 'null'
        value: 'true'
      gm_control_file_format:
        type: 'null'
        value: 'yaml'
      gm_control_file_filename:
        type: 'null'
        value: '/app/routes.yaml'
    resources:
      {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi

control-api:
  controlApi:
    # Name used for the deployment and service resources
    name: control-api                   
    # Display name used for NOTES.txt
    display_name: control-api            
    # Number of replicas for the deployment
    replicas: 1                         
    # Gm Control API version
    version: 1.4.4
    image: 'docker.greymatter.io/development/gm-control-api:{{ $.Values.controlApi.version }}'
    # When to pull images, used in the deployment
    image_pull_policy: IfNotPresent       
    # Port exposed by the control-api container
    container_port: 5555                           
    # Location to persist control-api's configuration store
    pvc_mount_point: '/app/control-api/data/backend.json' 
    secret:                             
      enabled: true
      secret_name: controlapi-certs
      mount_point: /service-certs
      secret_keys:
        ca: ca.crt
        cert: server.crt
        key: server.key
    envvars:
      gm_control_api_use_tls:
        type: 'value'
        value: "{{- if .Values.global.spire.enabled }}false{{- else}}{{ .Values.controlApi.secret.enabled }}{{- end }}"
      gm_control_api_ca_cert_path:
        type: 'value'
        value: "{{ .Values.controlApi.secret.mount_point}}/{{ .Values.controlApi.secret.secret_keys.ca }}"
      gm_control_api_server_cert_path:
        type: 'value'
        value: "{{ .Values.controlApi.secret.mount_point}}/{{ .Values.controlApi.secret.secret_keys.cert }}"
      gm_control_api_server_key_path:
        type: 'value'
        value: "{{ .Values.controlApi.secret.mount_point}}/{{ .Values.controlApi.secret.secret_keys.key }}"
      gm_control_api_log_level:
        type: 'value'
        value: 'debug'
      gm_control_api_address:
        type: 'value'
        value: '0.0.0.0:5555'
      gm_control_api_org_key:
        type: 'value'
        value: 'deciphernow'
      gm_control_api_zone_key:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      gm_control_api_zone_name:
        type: 'value'
        value: '{{ .Values.global.zone }}'
      gm_control_api_persister_type:
        type: value
        value: 'file'
      gm_control_api_persister_path:
        type: value
        value: '{{ .Values.controlApi.pvc_mount_point }}'
    resources:
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, and adjust them as necessary.
      # limits:
      #   cpu: 500m
      #   memory: 1Gi
      # requests:
      #   cpu: 250m
      #   memory: 256Mi
    pvc:
      size: 1Gi

  # SPIRE: If spire is enabled, uncomment these bootstrap envvars
  bootstrap:
    envvars:
      greymatter_api_ssl:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'


# Services list used to create Grey Matter configuration objects in control-api/config
services:
  catalog:
    catalogEnabled: true
    controlEnabled: true
    serviceName: 'catalog'
    observablesEnabled: false
    port: 9080
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: '/services/catalog/latest/'
    name: 'Grey Matter Catalog'
    owner: 'Decipher'
    data_prefix: "/data"
    version: 1.0.7
    minInstances: 1
    maxInstances: 1
    secret:
      enabled: true  
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  # control:
  #   name: 'Grey Matter Control'
  #   serviceName: 'control'

  dashboard:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Dashboard'
    serviceName: 'dashboard'
    observablesEnabled: false
    port: 1337
    enableInstanceMetrics: 'true'
    capability: 'Apps'
    documentation: ''
    owner: 'Decipher'
    version: 3.4.2
    secret:
      enabled: true  
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt


  prometheus:
    catalogEnabled: false
    controlEnabled: true
    name: 'Prometheus'
    serviceName: 'prometheus'
    observablesEnabled: false
    port: 9090
    secret:
      enabled: false

  data:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Data'
    serviceName: 'data'
    observablesEnabled: false
    port: 8181
    enableInstanceMetrics: 'true'
    capability: 'Data'
    jwt_prefix: '/jwt'
    documentation: '/services/data/latest/static/ui/index.html'
    owner: 'Decipher'
    version: 1.1
    jwt_prefix: /jwt
    secret:
      enabled: true  
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  internal-data:
    catalogEnabled: false
    controlEnabled: true
    name: 'Grey Matter Internal Data'
    serviceName: 'data-internal'
    observablesEnabled: false
    port: 8181
    enableInstanceMetrics: "true" 
    capability: 'Data'
    jwt_prefix: '/jwt'
    documentation: '/services/data/latest/static/ui/index.html'
    name: 'Grey Matter Internal Data'
    owner: 'Decipher'
    version: 1.1
    jwt_prefix: /jwt
    secret:
      enabled: true  
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  jwt:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter JWT Security'
    serviceName: 'jwt-security'
    observablesEnabled: false
    port: 3000
    enableInstanceMetrics: 'true'
    capability: 'Security'
    documentation: ''
    owner: 'Decipher'
    version: '1.1.1'
    secret:
      enabled: true  
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  internal-jwt:
    catalogEnabled: false
    controlEnabled: true
    name: 'Grey Matter JWT Security Internal'
    serviceName: 'internal-jwt-security'
    observablesEnabled: false
    port: 3000
    enableInstanceMetrics: 'true'
    capability: 'Grey Matter'
    documentation: ''
    owner: 'Decipher'
    version: '1.1.1'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  controlApi:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Control API'
    serviceName: 'control-api'
    observablesEnabled: false
    port: 5555
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation:
    owner: 'Decipher'
    version: '1.4.4'
    secret:          
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt

  edge:
    catalogEnabled: true
    controlEnabled: false
    name: 'Grey Matter Edge'
    serviceName: 'edge'
    observablesEnabled: false
    port: 10808
    # This is the DN of the new certificate issued to the edge for internal mesh communication. It needs to be whitelisted by the proxies
    egressDn: C=US,ST=Virginia,L=Alexandria,O=Decipher Technology Studios,OU=Engineering,CN=edge
    # We use a static cert on the edge listener
    removeListenerSecret: true
    enableInstanceMetrics: 'true'
    capability: 'Mesh'
    documentation: ''
    owner: 'Decipher'
    version: '1.4.4'
    ingress:
      secret:
        enabled: true
        secret_name: greymatter-edge-ingress
        mount_point: /etc/proxy/tls/edge
        secret_keys:
          cert: server.crt
          key: server.key
          ca: ca.crt
    egress:
      secret:
        enabled: false
        secret_name: greymatter-edge-egress
        mount_point: /etc/proxy/tls/sidecar
        secret_keys:
          cert: server.crt
          key: server.key
          ca: ca.crt

  slo:
    catalogEnabled: true
    controlEnabled: true
    name: 'Grey Matter Service Level Objectives'
    serviceName: 'slo'
    observablesEnabled: false
    port: 1337
    enableInstanceMetrics: 'true'
    capability: 'Sense'
    documentation:
    owner: 'Decipher'
    version: '1.1.5'
    secret:
      enabled: true
      secret_name: sidecar-certs
      mount_point: /etc/proxy/tls/sidecar
      insecure: true
      secret_keys:
        cert: server.crt
        key: server.key
        ca: ca.crt


jwt:
  # Sidecar configuration overrides for jwt sidecar
  sidecar:
    envvars:
      xds_cluster:
        type: value
        value: 'jwt-security'

  jwt:
    # Name used for the deployment and service resources
    name: jwt-security
    # Whether or not to use aac if using jwt-gov
    use_aac: false
    # If set, enables tls using the secret specified in secret_name
    #secret:
    #  secret_name: jwt-certs
    #  mount_point: /gm-jwt-security/certs
    # Location to mount the information specified in users_cg_name in the container
    users_mount_point: /gm-jwt-security/etc
    version: 1.1.1
    image: 'docker.greymatter.io/development/gm-jwt-security:{{ .Values.jwt.version }}'
    port: 3000
    envvars:
      private_key:
        type: secret
        secret: jwt-security
        key: jwt.key
      jwt_api_key:
        type: secret
        secret: jwt-security
        key: jwt.api_key
      enable_tls:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'
      zerolog_level:
        type: value
        value: 'info'
      token_exp_time:
        type: value
        value: '300'
      redis_port:
        type: value
        value: "6379"
      redis_db:
        type: value
        value: "0"
      server_trust:
        type: secret
        secret: jwt-certs
        key: jwt.trust.pem
      server_cert:      
        type: secret
        secret: jwt-certs
        key: jwt.cert.pem
      server_key:     
        type: secret
        secret: jwt-certs
        key: jwt.key.pem


  redis:
    private_image: true

internal-jwt:
  # Sidecar configuration overrides for internal-jwt sidecar
  sidecar:
    envvars:
      xds_cluster:
        type: value
        value: 'internal-jwt-security'

  jwt:
    # Name used for the deployment and service resources
    name: internal-jwt-security
    # If set, enables tls using the secret specified in secret_name
    #secret:
    #  secret_name: internal-jwt-certs
    #  mount_point: /gm-jwt-security/certs
    version: 1.1.1
    image: 'docker.greymatter.io/development/gm-jwt-security:{{ .Values.jwt.version }}'
    port: 3000
    envvars:
      private_key:
        type: secret
        secret: jwt-security
        key: jwt.key
      jwt_api_key:
        type: secret
        secret: jwt-security
        key: jwt.api_key
      enable_tls:
        type: value
        value: '{{ not .Values.global.spire.enabled }}'
      zerolog_level:
        type: value
        value: 'info'
      token_exp_time:
        type: value
        value: '300'
      redis_port:
        type: value
        value: "6379"
      redis_db:
        type: value
        value: "0"
      server_trust:
        type: secret
        secret: jwt-certs
        key: jwt.trust.pem
      server_cert:
        type: secret
        secret: jwt-certs
        key: jwt.cert.pem
      server_key:
        type: secret
        secret: jwt-certs
        key: jwt.key.pem

    # Provides a list of authorized users for the JWT service - preloaded with the DNs for GM Control, GM Catalog and the Mesh cert
    users_cg_name: internal-jwt-users
    users: |-
      {
        "users": [
            {
          "label": "CN=quickstart,OU=Engineering,O=Decipher Technology Studios,L=Alexandria,ST=Virginia,C=US",
          "values": {
            "email": [
              "quickstart@greymatter.io"
            ],
            "org": [
              "www.greymatter.io"
            ],
            "privilege": [
              "root"
            ]
          }
        },
        {
          "label": "CN=justin.ely,OU=Engineering,O=Decipher Technology Studios,L=Alexandria,ST=Virginia,C=US",
          "values": {
            "email": [
              "justin@gmail.com"
            ],
            "org": [
              "www.greymatter.io"
            ],
            "group": [
              "intern"
            ]
          }
        },
        {
          "label": "CN=localuser,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
          "values": {
            "email": [
              "localuser@greymatter.io"
            ],
            "org": [
              "www.greymatter.io"
            ],
            "privilege": [
              "root"
            ]
          }
        },
        {
          "label": "CN=gm-control,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
          "values": {
            "email": [
                "gm-control@greymatter.io"
            ],
            "org": [
                "www.greymatter.io"
            ],
            "privilege": [
                "root"
            ]
          }
        },
        {
          "label": "CN=gm-catalog,OU=Engineering,O=Decipher Technology Studios,=Alexandria,=Virginia,C=US",
          "values": {
            "email": [
                "engineering@greymatter.io"
            ],
            "org": [
                "www.greymatter.io"
            ],
            "privilege": [
                "root"
            ]
          }
        },
        {
          "label": "CN=greymatter,OU=Engineering,O=Decipher Technology Studios,L=Alexandria,ST=Virginia,C=US",
          "values": {
            "email": [
                "engineering@greymatter.io"
            ],
            "org": [
                "www.greymatter.io"
            ],
            "privilege": [
                "root"
            ]
          }
        },
      {
        "label": "O=SPIRE,C=US",
        "values": {
          "email": [
              "engineering@greymatter.io"
          ],
          "org": [
              "www.greymatter.io"
          ],
          "privilege": [
              "root"
          ]
        }
      }]
      }


  redis:
    # Name used for the internal-redis deployment and service resources
    name: internal-redis
    # The secret containing the password to configure the environment variable REDIS_PASSWORD
    secret:
      secret_name: internal-redis-password

